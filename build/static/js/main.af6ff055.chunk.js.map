{"version":3,"sources":["WeatherApp/WeatherOverview.js","WeatherApp/WeatherDaily/WeatherTableRow.js","WeatherApp/WeatherDaily/WeatherDailyComponent.js","WeatherApp/WeatherDaily/WeatherDailyOverview.js","WeatherApp/WeatherFiveDay/WeatherFiveDayComponent.js","WeatherApp/WeatherFiveDay/WeatherFiveDayOverview.js","api/ApiDarkSky.js","WeatherApp/Navbar/Navbar.js","WeatherApp/WeatherApp.js","serviceWorker.js","index.js"],"names":["WeatherOverview","props","weather","sunriseTime","Date","daily","data","sunsetTime","react_default","a","createElement","className","currently","temperature","toFixed","react_skycons_default","icon","toUpperCase","replace","style","width","height","color","index_es","faTint","humidity","faWind","windSpeed","flags","units","faSun","getHours","concat","getMinutes","faMoon","summary","WeatherTableRow","times","toLocaleTimeString","hour","minute","hour12","precipProbability","WeatherDailyComponent","hourly","time","scope","WeatherDaily","WeatherDaily_WeatherDailyComponent","WeatherFiveDayComponent","dayNumber","getDay","temperatureLow","temperatureHigh","WeatherFiveDayOverview","WeatherFiveDay_WeatherFiveDayComponent","ApiDarkSky","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","apiResponse","error","isLoaded","position","apiKey","process","baseApiUrl","stockholm","_this2","setState","fetch","then","res","json","console","log","catch","err","_this3","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","getCurrentWeather","prevProps","_this$state","message","Route","exact","path","render","WeatherApp_WeatherOverview","assign","WeatherDailyOverview","WeatherFiveDay_WeatherFiveDayOverview","React","Component","Navbar","Link","to","href","onClick","changeUnits","WeatherApp","unitFormat","Navbar_Navbar","ApiDarkSky_ApiDarkSky","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_WeatherApp_WeatherApp","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af6ff055.chunk.js","sourcesContent":["import React from 'react';\r\nimport Skycons from 'react-skycons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faWind, faTint } from '@fortawesome/free-solid-svg-icons';\r\nimport '../index.css';\r\n\r\nfunction WeatherOverview(props) {\r\n  const { weather } = props;\r\n  const sunriseTime = new Date(weather.daily.data[0].sunriseTime * 1000);\r\n  const sunriseHours = () => sunriseTime.getHours() < 10 ? `0${sunriseTime.getHours()}` : sunriseTime.getHours();\r\n  const sunsetTime = new Date(weather.daily.data[0].sunsetTime * 1000);\r\n\r\n  return (\r\n    <section className='weatherBox'>\r\n      <div className='skyconBox'>\r\n        <h2>{weather.currently.temperature.toFixed(0)}°</h2>\r\n        <Skycons\r\n        icon={weather.currently.icon.toUpperCase().replace(/-/g, '_')}\r\n        style={{}}\r\n        width='64px'\r\n        height='64px'\r\n        color='white'\r\n        />\r\n      </div>\r\n      <p><FontAwesomeIcon icon={faTint} /> Humidity: {(weather.currently.humidity * 100).toFixed(0)}%<br />\r\n      <FontAwesomeIcon icon={faWind} /> Wind Speed: {weather.currently.windSpeed} {weather.flags.units === 'si' ? 'm/s' : 'mph'}</p>\r\n      <p><FontAwesomeIcon icon={faSun} /> Sunrise: {sunriseHours()}:{sunriseTime.getMinutes()}<br />\r\n      <FontAwesomeIcon icon={faMoon} /> Sunset: {sunsetTime.getHours()}:{sunsetTime.getMinutes()}</p>\r\n      <p className='summary'>{weather.currently.summary}</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default WeatherOverview;","import React from 'react';\r\nimport Skycons from 'react-skycons';\r\n\r\nexport default function WeatherTableRow(props) {\r\n  const { times, data } = props;\r\n\r\n  return (\r\n    <tr>\r\n      <td>{times.toLocaleTimeString([], {hour: '2-digit', minute: '2-digit', hour12: false})}</td>\r\n      <td><Skycons\r\n        icon={data.icon.toUpperCase().replace(/-/g, '_')}\r\n        style={{}}\r\n        width='32px'\r\n        height='32px'\r\n        color='rgba(30,87,153,1)'\r\n        /></td>\r\n      <td>{data.temperature.toFixed(0)}°</td>\r\n      {/* <td>{data.apparentTemperature.toFixed(0)}</td> */}\r\n      <td>{(data.precipProbability * 100).toFixed(0)}%</td>\r\n      {/* <td>{(data.humidity * 100).toFixed(0)}%</td> */}\r\n      <td>{data.windSpeed}</td>\r\n    </tr>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport WeatherTableRow from './WeatherTableRow';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWind } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction WeatherDailyComponent(props) {\r\n  const { weather, hour } = props;\r\n  const { data } = weather.hourly;\r\n  const times = [\r\n    new Date(data[0].time * 1000),\r\n    new Date(data[3].time * 1000),\r\n    new Date(data[6].time * 1000),\r\n    new Date(data[9].time * 1000),\r\n    new Date(data[12].time * 1000),\r\n    new Date(data[15].time * 1000),\r\n    new Date(data[18].time * 1000),\r\n    new Date(data[21].time * 1000)\r\n  ]\r\n\r\n  return(\r\n    <table>\r\n      <caption>Weather for the coming 24 hours</caption>\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">Time</th>\r\n          <th scope=\"col\">Sum.</th>\r\n          <th scope=\"col\">Temp.</th>\r\n          {/* <th scope=\"col\">Feels&nbsp;like</th> */}\r\n          <th scope=\"col\">Precip.</th>\r\n          {/* <th scope=\"col\">Humidity</th> */}\r\n          <th scope=\"col\"><FontAwesomeIcon icon={faWind} /></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <WeatherTableRow times={times[0]} data={data[0]} />\r\n        <WeatherTableRow times={times[1]} data={data[3]} />\r\n        <WeatherTableRow times={times[2]} data={data[6]} />\r\n        <WeatherTableRow times={times[3]} data={data[9]} />\r\n        <WeatherTableRow times={times[4]} data={data[12]} />\r\n        <WeatherTableRow times={times[5]} data={data[15]} />\r\n        <WeatherTableRow times={times[6]} data={data[18]} />\r\n        <WeatherTableRow times={times[7]} data={data[21]} />\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default WeatherDailyComponent;","import React from 'react';\r\n\r\nimport WeatherDailyComponent from './WeatherDailyComponent';\r\n\r\nconst WeatherDaily = (props) => {\r\n  return (\r\n    <div className=\"weatherDailyContainer\">\r\n      <WeatherDailyComponent weather={props.weather}/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default WeatherDaily;","import React from 'react';\r\nimport Skycons from 'react-skycons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSun, faMoon, faWind, faTint } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction WeatherFiveDayComponent(props) {\r\n  const { weather, units } = props;\r\n  const sunriseTime = new Date(weather.sunriseTime * 1000);\r\n  const sunriseHours = () => sunriseTime.getHours() < 10 ? `0${sunriseTime.getHours()}` : sunriseTime.getHours();\r\n  const sunriseMinutes = () => sunriseTime.getMinutes() < 10 ? `0${sunriseTime.getMinutes()}` : sunriseTime.getMinutes();\r\n  const sunsetTime = new Date(weather.sunsetTime * 1000);\r\n  const time = new Date(weather.time * 1000);\r\n  const dayNumber = time.getDay();\r\n  const weekDays = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday',\r\n    'Sunday'\r\n  ]\r\n\r\n  return (\r\n    <section className='weatherBox'>\r\n      <div className='skyconBox'>\r\n        <h2>{weekDays[dayNumber]}</h2>\r\n        <Skycons\r\n        icon={weather.icon.toUpperCase().replace(/-/g, '_')}\r\n        style={{}}\r\n        width='64px'\r\n        height='64px'\r\n        color='white'\r\n        />\r\n      </div>\r\n      <p>Low: {weather.temperatureLow.toFixed(0)}° High: {weather.temperatureHigh.toFixed(0)}°</p>\r\n      <p><FontAwesomeIcon icon={faTint} /> Humidity: {(weather.humidity * 100).toFixed(0)}%<br />\r\n      <FontAwesomeIcon icon={faWind} /> Wind Speed: {weather.windSpeed.toFixed(1)} {units === 'si' ? 'm/s' : 'mph'}</p>\r\n      <p><FontAwesomeIcon icon={faSun} /> Sunrise: {sunriseHours()}:{sunriseMinutes()}<br />\r\n      <FontAwesomeIcon icon={faMoon} /> Sunset: {sunsetTime.getHours()}:{sunsetTime.getMinutes()}</p>\r\n      <p className='summary'>{weather.summary}</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default WeatherFiveDayComponent;","import React from 'react';\r\n\r\nimport WeatherFiveDayComponent from './WeatherFiveDayComponent';\r\n\r\nconst WeatherFiveDayOverview = (props) => {\r\n  return (\r\n    <div className=\"weatherDailyContainer\">\r\n      <WeatherFiveDayComponent weather={props.weather.daily.data[0]} units={props.weather.flags.units}/>\r\n      <WeatherFiveDayComponent weather={props.weather.daily.data[1]} units={props.weather.flags.units}/>\r\n      <WeatherFiveDayComponent weather={props.weather.daily.data[2]} units={props.weather.flags.units}/>\r\n      <WeatherFiveDayComponent weather={props.weather.daily.data[3]} units={props.weather.flags.units}/>\r\n      <WeatherFiveDayComponent weather={props.weather.daily.data[4]} units={props.weather.flags.units}/>\r\n    </div>\r\n  );\r\n}\r\n \r\nexport default WeatherFiveDayOverview;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport '../index.css';\r\nimport WeatherOverview from '../WeatherApp/WeatherOverview';\r\nimport WeatherDaily from '../WeatherApp/WeatherDaily/WeatherDailyOverview';\r\nimport WeatherFiveDayOverview from '../WeatherApp/WeatherFiveDay/WeatherFiveDayOverview';\r\n\r\nexport default class ApiDarkSky extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      apiResponse: {},\r\n      error: null,\r\n      isLoaded: false,\r\n      position: null\r\n    };\r\n\r\n    this.apiKey = process.env.REACT_APP_DARKSKY_API_KEY;\r\n    this.baseApiUrl = \"https://api.darksky.net/forecast/\";\r\n    this.stockholm = \"/59.3260668, 17.841971\";\r\n  }\r\n\r\n  getCurrentWeather() {\r\n    this.setState({\r\n      isLoaded: false\r\n    });\r\n\r\n    fetch(`http://157.230.114.10/${this.baseApiUrl}${this.apiKey}${this.state.position}${this.props.units}`)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then(weather => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          apiResponse: weather\r\n        })\r\n        if (this.state.isLoaded) {\r\n          console.log(weather);\r\n          console.log(this.state.apiResponse);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          error: err\r\n        })\r\n        console.log(\"Error, something went wrong\" + err);\r\n      })\r\n  };\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(pos => {\r\n      this.setState({\r\n        position: `/${pos.coords.latitude}, ${pos.coords.longitude}`\r\n      })\r\n      console.log(pos);\r\n      this.getCurrentWeather();\r\n    }, error => {\r\n      this.setState({\r\n        position: this.stockholm\r\n      })\r\n      this.getCurrentWeather();\r\n    })\r\n\r\n    console.log(this.state.position);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.units !== prevProps.units) {\r\n      this.getCurrentWeather();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { apiResponse, error, isLoaded } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (isLoaded) {\r\n      return(\r\n        <div>\r\n          <Route\r\n            exact path=\"/\"\r\n            render={(props) => <WeatherOverview {...props} weather={apiResponse} isLoaded={isLoaded} />}\r\n          />\r\n          <Route\r\n            path=\"/daily\"\r\n            render={(props) => <WeatherDaily {...props} weather={apiResponse} isLoaded={isLoaded} />}\r\n          />\r\n          <Route\r\n            path=\"/fiveday\"\r\n            render={(props) => <WeatherFiveDayOverview {...props} weather={apiResponse} isLoaded={isLoaded} />}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return(<p>Loading...</p>);\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n  console.log(\"Navbar props: \", props);\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li><Link to=\"/\">Current Weather</Link></li>\r\n        <li><Link to=\"/daily\">Today's Weather</Link></li>\r\n        <li><a href=\"/fiveday\">5 Day Prognosis</a></li>\r\n      </ul>\r\n      <div className=\"tempDiv\">\r\n        <button className=\"tempBut\" onClick={() => props.changeUnits(\"?units=si\")}>°C</button>\r\n        <button className=\"tempBut\" onClick={() => props.changeUnits(\"?units=us\")}>°F</button>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport './WeatherApp.css';\nimport ApiDarkSky from '../api/ApiDarkSky';\nimport Navbar from './Navbar/Navbar';\n\nclass WeatherApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      units: '?units=auto'\n    }\n  }\n\n  changeUnits = (unitFormat) => {\n    console.log(unitFormat);\n    this.setState({\n      units: unitFormat\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar changeUnits={this.changeUnits}/>\n        <main>\n          <h1>What's the weather?</h1>\n          <ApiDarkSky units={this.state.units}/>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default WeatherApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherApp from './WeatherApp/WeatherApp';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n<BrowserRouter>\n  <WeatherApp /> \n</BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}